<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ include file="GenerationConfig.ttinclude" #><# GenerateCopyrightHeader(); #>


using System.Runtime.InteropServices;
using System;

namespace FastBlockCopy
{
    public static partial class FastBuffer
    {

	<#
    foreach (var src in supportedTypeNames)
    {
		foreach (var dst in supportedTypeNames)
		{
#>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
			public unsafe static void UnsafeBlockCopy(this <#= src #>[] src, int srcOffset, <#= dst #>[] dst, int dstOffset, int count)
			{
				fixed (<#= src #>* srcOrigin = &src[srcOffset])
				fixed (<#= dst #>* dstOrigin = &dst[dstOffset])
				{
					UnsafeBlockCopy((byte*)srcOrigin, (byte*)dstOrigin, count);
				}
			}
		<#
		}
    }
#>

<#
    foreach (var src in supportedTypeNames)
    {
		foreach (var dst in supportedTypeNames)
		{
#>
		
			public unsafe static void BlockCopy(this <#= src #>[] src, int srcOffset, <#= dst #>[] dst, int dstOffset, int count)
			{
				if (src == null) throw new ArgumentNullException(nameof(src));
		        if (dst == null) throw new ArgumentNullException(nameof(dst));
		        if (count < 0 || srcOffset < 0 || dstOffset < 0) throw new ArgumentOutOfRangeException(nameof(count));
		        if (count == 0) return;
		        if (srcOffset + count > src.Length) throw new ArgumentException(nameof(src));
		        if (dstOffset + count > dst.Length) throw new ArgumentException(nameof(dst));

				UnsafeBlockCopy(src,srcOffset,dst,dstOffset,count);
			}
		<#
		}
    }
#>

    }
}